import os

cancerTypes = [
'breast_cancer',
'clear_cell_renal_cell_carcinoma_(kidney)',
'colorectal_cancer',
'endometrial_carcinoma_(uterine)',
'glioblastoma',
'head_and_neck_squamous_cell_carcinoma',
'lung_squamous_cell_carcinoma',
'lung_adenocarcinoma',
'high_grade_serous_ovarian_cancer',
'pancreatic_ductal_adenocarcinoma']


cancerTypesSubset = [
'clear_cell_renal_cell_carcinoma_(kidney)',
'endometrial_carcinoma_(uterine)',
'glioblastoma',
'head_and_neck_squamous_cell_carcinoma',
'lung_squamous_cell_carcinoma',
'lung_adenocarcinoma']

rule all:
    input:
        expand("../Figures/VolcanoPlots/{type}_volcano.pdf", type=cancerTypesSubset)

rule E3Sub_download:
    output:
        "../Data/literature.E3.txt"
    shell:
        """
        wget http://ubibrowser.bio-it.cn/ubibrowser_v3/Public/download/literature/literature.E3.txt -O ../Data/literature.E3.txt
        """

rule protac_download:
    output:
        "../Data/Protac.csv"
    shell:
        """
        curl http://cadd.zju.edu.cn/protacdb/statics/binaryDownload/csv/protac/protac.csv > ../Data/Protac.csv
        """

rule cptac_download:
    output:
        expand("../Data/CPTAC/{type}.csv", type=cancerTypes)
    script:
        "cptac_download.py"
    
rule file_setup:
    input:
        "../Data/literature.E3.txt",
        "../Data/Protac.csv"
    shell:
        """
        bash file_setup.sh
        """
    output:
        "../Data/E3Subs_known.txt", 
        "../ProcessedData/existing_protacs.txt", 
        "../ProcessedData/E3Sub_pairs_full.txt", 
        "../ProcessedData/subset_list.txt", 
        "../ProcessedData/E3List.txt", 
        "../ProcessedData/targetProteinList.txt"

# rule filter_E3Subs:
#     input:
#         "../Data/literature.E3.txt"
#     output:
#         "../Data/E3Subs_known.txt"
#     shell:
#         """
#         awk -F'\t' '/H.sapiens/{print $6, $7, $8, $9, $11, $14}' OFS='\t' ../Data/literature.E3.txt > ../Data/E3Subs_known.txt
#         """

# rule get_E3_list:
#     input:
#         "../Data/E3Subs_known.txt"
#     output:
#         "../ProcessedData/E3List.txt"
#     shell:
#         """
#         awk '{print $1}'../Data/ E3Subs_known.txt | sort -u > ../ProcessedData/E3List.txt
#         """

# rule get_target_protein_list:
#     input:
#         "../Data/E3Subs_known.txt"
#     output:
#         "../ProcessedData/targetProteinList.txt"
#     shell:
#         """
#         awk '{print $2}' ../Data/E3Subs_known.txt | sort -u > ../ProcessedData/targetProteinList.txt
#         """

# rule get_subset_list:
#     input:
#         "../ProcessedData/E3List.txt",
#         "../ProcessedData/targetProteinList.txt"
#     output:
#         "../ProcessedData/subset_list.txt"
#     shell:
#         """
#         cat ../ProcessedData/E3List.txt ../ProcessedData/targetProteinList.txt > ../ProcessedData/subset_list.txt
#         """

# rule get_pairs_list:
#     input:
#         "../Data/E3Subs_known.txt"
#     output:
#         "../ProcessedData/E3Sub_pairs.txt"
#     shell:
#         """
#         ./get_pairs.sh
#         """

rule subset_cptac:
    input:
        "Data/CPTAC"
    output:
        expand("../ProcessedData/subset_data/{type}.csv", type=cancerTypesSubset)
    shell:
        """
        ./transpose_and_subset.sh
        """

rule t_test:
    input:
        "../ProcessedData/subset_data/{type}_tt_subset.csv"
    output:
        "../ProcessedData/pvalues/{type}.txt"
    script:
        "t_test.R"

rule find_sig_pairs:
    input:
        expand("../ProcessedData/pvalues/{type}.txt", type=cancerTypesSubset),
        "../ProcessedData/E3Sub_pairs_full.txt",
        "../ProcessedData/existing_protacs.txt"
    output:
        expand("../ProcessedData/sig_pairs/val_protacs/{type}", type=cancerTypesSubset),
        expand("../ProcessedData/sig_pairs/potential_protacs/{type}", type=cancerTypesSubset)
    script:
        "sig_pairs.py"

rule find_label_sets:
    input:
        expand("../ProcessedData/sig_pairs/val_protacs/{type}", type=cancerTypesSubset),
        expand("../ProcessedData/sig_pairs/potential_protacs/{type}", type=cancerTypesSubset)
    shell:
        """
        bash min.awk
        """
    output:
        expand("../ProcessedData/sig_pairs/most_sig/{type}_most_sig.txt", type=cancerTypesSubset)

rule volcano:
    input:
        "../ProcessedData/pvalues/{type}.txt",
        "../ProcessedData/E3List.txt",
        "../ProcessedData/sig_pairs/most_sig/{type}_most_sig.txt"
    output:
        "../Figures/VolcanoPlots/{type}_volcano.pdf"
    script:
        "volcano.R"

rule merge_protac_types:
    input:
        expand("../ProcessedData/sig_pairs/val_protacs/{type}", type=cancerTypesSubset),
        expand("../ProcessedData/sig_pairs/potential_protacs{type}", type=cancerTypesSubset)
    script:
        "merge_protac_types.py"
    output:
        "../ProcessedData/merged_types_validated.txt",
        "../ProcessedData/merged_types_potential.txt"

rule single_multiple_cancer_protacs:
    input:
        "../ProcessedData/merged_types_validated.txt"
    script:
        "single_multiple_cancer_protacs.py"
    output:
        "../ProcessedData/single_cancer_protacs.txt",
        "../ProcessedData/multiple_cancer_protacs.txt"

rule single_cancer_protacs_pval:
    input:
        "../ProcessedData/single_cancer_protacs.txt"
    script:
        "single_cancer_protacs_pval.py"
    output:
        "../ProcessedData/single_cancer_protacs_pval.txt"

rule find_table2_sets:
    input:
        expand("../ProcessedData/sig_pairs/potential_protacs/{file}", file=os.listdir("../ProcessedData/sig_pairs/potential_protacs/"))
    shell:
        """
        bash find_table2_sets.sh
        """
    output:
        expand("../ProcessedData/sig_pairs/table2/{type}_most_sig.txt", type=cancerTypesSubset)

rule sig_proteins_to_uniprot:
    input:
        "../ProcessedData/merged_types_validated.txt",
        "../ProcessedData/merged_types_potential.txt",
        "../Data/literature.E3.txt"
    output:
        "../ProcessedData/pymol/val_uniprot.csv",
        "../ProcessedData/pymol/uniprot_to_hugo.tsv"
    shell:
        """
        bash pymolAnalysis/sig_proteins_to_uniprot.sh
        """

rule uniprot_to_pdb:
    input:
        "../ProcessedData/pymol/val_uniprot.csv"
    output:
        "../ProcessedData/pymol/val_pdb.tsv"
    shell:
        """
        bash pymolAnalysis/submitMapJob.sh
        python pymolAnalysis/getPDBResponse.py
        """

rule fetch_pdb_files:
    input:
        "../ProcessedData/pymol/val_pdb.tsv"
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate pymolv1
            pymol -c pymolAnalysis/fetch.pml
            conda activate E3v1'
        """
    output:
        pdbIds = []
        with open("../ProcessedData/pymol/val_pdb.tsv") as file:
            for line in file:
                split = line.split('\t')
                pdbIds.append(split[1])
        expand("../ProcessedData/pymol/pdbfiles/{id}.pdb", id=pdbIds)

rule get_protein_features:
    input:
        expand("../ProcessedData/pymol/pdbfiles/{file}", file=os.listdir('../ProcessedData/pymol/pdbfiles'))
    script:
        "pymolAnalysis/getProteinFeatures.py"
    